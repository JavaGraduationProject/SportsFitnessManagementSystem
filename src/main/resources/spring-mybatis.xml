<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
    <!--关联db.properties-->
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>
    <!--使用c3p0连接池-->
    <bean  id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
<!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--配置开启事务操作-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为，匹配的是方法名 -->
            <tx:method name="add*" rollback-for="Exception"/>
            <tx:method name="delete*" rollback-for="Exception"/>
            <tx:method name="update*" rollback-for="Exception"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!--进行事务增强  让service中的方法都拥有事务-->
    <aop:config>
        <aop:pointcut id="serviceMethod" expression="execution(* com.stern.service..*.*(..))"/>
        <aop:advisor  pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
    </aop:config>

    <!--mybatis面向接口，dao层没有实现类，对接口进行同意扫描  Mapper映射文件的包扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.stern.mapper"/>
    </bean>
    <!--spring管理session工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--如果映射文件和接口在一个包下，并且命名一致，配置了上面的MapperScannerConfigurer,可以不写这句-->
        <!--<property name="mapperLocations" value="classpath:com/dao/mapper/*.xml"/>-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!-- 启动自动扫描 因为使用了注解声明bean-->
    <context:component-scan base-package="com.stern.*">
        <!-- 制定扫包规则 ,不扫描@Controller注解的JAVA类 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--注入kaptcha-->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <!--通过构造函数注入属性值-->
                <constructor-arg type="java.util.Properties">
                    <props>
                        <!--验证码宽度-->
                        <prop key="kaptcha.image.width">191</prop>
                        <!--验证码高度-->
                        <prop key="kaptcha.image.height">34</prop>
                        <!--生成验证码内容范围-->
                        <prop key="kaptcha.textproducer.char.string">abcde2345678gfynmnpwx</prop>
                        <!--验证码个数-->
                        <prop key="kaptcha.textproducer.char.length">5</prop>
                        <!--是否有边框-->
                        <prop key="kaptcha.border">no</prop>
                        <!--验证码字体颜色-->
                        <prop key="kaptcha.textproducer.font.color">red</prop>
                        <!--验证码字体大小-->
                        <prop key="kaptcha.textproducer.font.size">25</prop>
                        <!--验证码所属字体样式-->
                        <prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>
                        <prop key="kaptcha.background.clear.from">white</prop>
                        <prop key="kaptcha.background.clear.to">white</prop>
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <!--干扰线颜色-->
                        <prop key="kaptcha.noise.color">black</prop>
                        <!--验证码文本字符间距-->
                        <prop key="kaptcha.textproducer.char.space">4</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
</beans>